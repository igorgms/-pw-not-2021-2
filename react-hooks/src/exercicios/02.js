import * as React from 'react'

export default function Exercicio02({ initialName = '' }) {
    // üê® initialize the state to the value from localStorage  
    // üí∞ window.localStorage.getItem('name') || initialName
    const [name, setName] = React.useState(
        window.localStorage.getItem('name') || initialName
    )
    const [count, setCount] = React.useState(0)
    // üê® Here's where you'll use `React.useEffect`.  
    // The callback should set the `name` in localStorage.  
    // üí∞ window.localStorage.setItem('name', name)  

    // Armazenando um item no localStorage chamado "name" o valor
    // da vari√°vel de estado nome
    React.useEffect(() => {
        window.localStorage.setItem('name', name)
        setCount(count + 1)
    }, [name])
    // useEffect tem dois par√¢metros:
    // 1) √â uma fun√ß√£o que ser√° atualizada depois de uma atualiza√ß√£o do componente
    // 2) Vetor de depend√™ncias: qual ou quais as vari√°veis de estado que ser√£o monitoradas para a execu√ß√£o do useEffect()

    function handleChange(event) {
        // A atualiza√ß√£o da vari√°vel de estado "name" vai desencadear
        // uma atualiza√ß√£o do componente. Ap√≥s a atualiza√ß√£o ter sido
        // processada, ser√° executado o React.useEffect()
        setName(event.target.value)
    }

    return (
        <div>
            <form>
                <label htmlFor="name">Name: </label>
                <input value={name} onChange={handleChange} id="name" />
            </form>
            {name ? <strong>Hello {name}</strong> : 'Please type your name'}
            <div>Quantidade de atualiza√ß√µes: {count}</div>
        </div>
    )
}